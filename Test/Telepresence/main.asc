/*
 * (C) Copyright 2007 Adobe Systems Incorporated. All Rights Reserved.
 *
 * NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance with the 
 * terms of the Adobe license agreement accompanying it.  If you have received this file from a 
 * source other than Adobe, then your use, modification, or distribution of it requires the prior 
 * written permission of Adobe. 
 * THIS CODE AND INFORMATION IS PROVIDED "AS-IS" WITHOUT WARRANTY OF
 * ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
 * PARTICULAR PURPOSE.
 *
 *  THIS CODE IS NOT SUPPORTED BY Adobe Systems Incorporated.
 *
 */


// main.asc file
// server-side actionscript

var nc;
var ns;

// Called when a client connects
application.onConnect = function(client) {
	
	// accept the new client's connection
 	application.acceptConnection(client);
 	
 	// send a message
 	trace("Hello! You are connected!");	
}

// Called when a client disconnects
application.onDisconnect = function(client) {
	trace( "Disconnecting at " + new Date() );
}


// Called when the client publishes
application.onPublish = function(client, myStream) {
	
	trace(myStream.name + " is publishing into application " + application.name);

	// This is an example of using the multi-point publish feature to republish
	// streams to another application instance on the local server.
	if (application.name == "LiveStreams/_definst_"){

		trace("Republishing the stream into anotherInstance");

		nc = new NetConnection();
		nc.connect( "rtmp://localhost/LiveStreams/anotherInstance" );
		
		ns = new NetStream(nc);
		
		// called when the server NetStream object has a status
		ns.onStatus = function(info) {
			trace("Stream Status: " + info.code)
			if (info.code == "NetStream.Publish.Start") {
				trace("The stream is now publishing");
			}           
		}
		
		ns.setBufferTime(2);
		ns.attach(myStream);
		ns.publish( myStream.name, "live" );
	}
}

application.onUnpublish = function( client, myStream ) {
	trace(myStream.name + " is unpublishing"  );
}